name: Build Workflow

on: [push, pull_request]

env:
  ACTIONS_ALLOW_USE_UNSECURE_NODE_VERSION: true

jobs:
  build-linux:
    runs-on: ubuntu-20.04
    container:
      image: ubuntu:18.04
    steps:
      - name: Install dependencies into minimal dockerfile
        run: |
          # ubuntu dockerfile is very minimal (only 122 packages are installed)
          # need to install updated git (from official git ppa)
          apt update
          apt install -y software-properties-common
          add-apt-repository ppa:git-core/ppa -y
          # install dependencies expected by other steps
          apt update
          apt install -y git \
          curl \
          ca-certificates \
          wget \
          bzip2 \
          zip \
          unzip \
          xz-utils \
          maven \
          ant sudo locales

          # set Locale to en_US.UTF-8 (avoids hang during compilation)
          locale-gen en_US.UTF-8
          echo "LANG=en_US.UTF-8" >> $GITHUB_ENV
          echo "LANGUAGE=en_US.UTF-8" >> $GITHUB_ENV
          echo "LC_ALL=en_US.UTF-8" >> $GITHUB_ENV

      - name: Install cross-compilation toolchains
        run: |
          sudo apt update
          sudo apt install -y --force-yes gcc g++
          sudo apt install -y --force-yes gcc-aarch64-linux-gnu g++-aarch64-linux-gnu libc6-dev-arm64-cross
          sudo apt install -y --force-yes gcc-arm-linux-gnueabihf g++-arm-linux-gnueabihf libc6-dev-armhf-cross
          sudo apt install -y --force-yes mingw-w64 lib32z1
          sudo apt install -y --force-yes gcc-multilib
          sudo dpkg --add-architecture i386
          sudo apt-get update
          sudo apt-get install libc6:i386 libstdc++6:i386
          

      - uses: actions/checkout@v2
        with:
          fetch-depth: 0

      - name: Set up JDK 17
        uses: actions/setup-java@v3
        with:
          distribution: 'zulu'
          java-version: '17'


      - name: Initialize jnigen
        run: ./gradlew jnigen
      - name: Build natives
        run: ./gradlew jnigenBuildAllLinux jnigenBuildAllAndroid --info
  build-mac:
    runs-on: macos-latest
    steps:
      - name: Build macOS natives
        run: |
          # See https://github.com/actions/virtual-environments/issues/2557
          sudo mv /Library/Developer/CommandLineTools/SDKs/* /tmp
          sudo mv /Applications/Xcode.app /Applications/Xcode.app.bak
          sudo mv /Applications/Xcode_14.3.1.app /Applications/Xcode.app
          sudo xcode-select -switch /Applications/Xcode.app
          /usr/bin/xcodebuild -version

      - uses: actions/checkout@v2
        with:
          fetch-depth: 0
          submodules: 'recursive'

      - name: Set up JDK 17
        uses: actions/setup-java@v3
        with:
          distribution: 'zulu'
          java-version: '17'


      - name: Initialize jnigen
        run: ./gradlew jnigen
      - name: Build natives
        run: ./gradlew jnigenBuildAllIOS jnigenBuildAllMacOsX --info
  build-windows:
    runs-on: windows-latest
    steps:
      - uses: actions/checkout@v2
        with:
          fetch-depth: 0
          submodules: 'recursive'

      - name: Set up JDK 17
        uses: actions/setup-java@v3
        with:
          distribution: 'zulu'
          java-version: '17'

      - name: Initialize jnigen
        run: ./gradlew jnigen
      - name: Build natives
        run: ./gradlew jnigenBuildAllWindows --info


  package:
    runs-on: ubuntu-latest
    needs: [build-linux, build-mac, build-windows]
    steps:
      - uses: actions/checkout@v2

      - name: Download Artifacts from linux
        if: success() && needs.build-linux.result == 'success'
        uses: actions/download-artifact@v2
        with:
          name: linux-artifacts
          path: artifacts/linux
      - name: Download Artifacts from mac
        if: success() && needs.build-mac.result == 'success'
        uses: actions/download-artifact@v2
        with:
          name: mac-artifacts
          path: artifacts/mac
      - name: Download Artifacts from windows
        if: success() && needs.build-windows.result == 'success'
        uses: actions/download-artifact@v2
        with:
          name: windows-artifacts
          path: artifacts/windows


      - name: Package All
        run: ./gradlew jnigenPackageAll
